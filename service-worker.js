/* eslint-disable no-restricted-globals */
// Set this to true for production
var doCache = true;

// Name our cache
var CACHE_NAME = 'multi-timer-cache-v1';
const UNCACHABLE_HOSTS = [
  'time100.ru',
]

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys()
      .then(keyList =>
        Promise.all(keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            return caches.delete(key);
          }
        }))
      )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function (event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function (cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch("asset-manifest.json")
            .then(response => {
              response.json()
            })
            .then(assets => {
              // Open a cache and cache our files
              // We want to cache the page and the main.js generated by webpack
              // We could also cache any static assets like CSS or images
              const urlsToCache = [
                "/",
              ]
              cache.addAll(urlsToCache)
            })
        })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', (event) => {
  const targetUrl = new URL(event.request.url);
  const targetHost = targetUrl.host;
  if (doCache) {
    event.respondWith(
      caches.match(event.request)
        .then(async (response) => {
          try {
            const fetchResponse = await fetch(event.request);
            if (UNCACHABLE_HOSTS.includes(targetHost)) {
              return fetchResponse;
            }
            const cache = await caches.open(CACHE_NAME);
            await cache.add(fetchResponse.url);
            return fetchResponse;
          } catch {
            return response;
          }
        })
        .catch((err) => {
          console.log(err);
        })
    );
  }
});